name: Deploy static site to GAE

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  VERSION: sha-${{ github.sha }}
  VERSION_URL: https://${{ vars.GCP_PROJECT }}.uc.r.appspot.com/

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: PROD
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Auth to Google Cloud (OIDC)
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT }}

      - name: Configure project/region
        run: |
          gcloud config set project "${{ vars.GCP_PROJECT }}"
          gcloud config set app/cloud_build_timeout 1200

      - name: Deploy to App Engine
        run: |
          gcloud app deploy app.yaml \
            --project "${{ vars.GCP_PROJECT }}" \
            --quiet \
            --version "${VERSION}" \
            --no-promote
            
      - name: Wait until version is healthy (SERVING + HTTP 200)
        shell: bash
        run: |
          set -euo pipefail
          echo "Version: ${VERSION}"
          echo "URL: ${VERSION_URL}"

          # 1) Waiting status SERVING in GAE
          for i in {1..60}; do
            STATUS=$(gcloud app versions describe "${VERSION}" \
              --service="${{ vars.GAE_SERVICE }}" \
              --project="${{ vars.GCP_PROJECT }}" \
              --format='value(servingStatus)' || true)
            echo "servingStatus=${STATUS}"
            if [[ "${STATUS}" == "SERVING" ]]; then
              break
            fi
            sleep 5
          done

          if [[ "${STATUS:-}" != "SERVING" ]]; then
            echo "Version never reached SERVING"
            exit 1
          fi

          # 2) Check HTTP 200
          backoff=2
          for attempt in {1..10}; do
            CODE=$(curl -sS -o /dev/null -w "%{http_code}" --max-time 10 "${VERSION_URL}")
            echo "Attempt ${attempt}: HTTP ${CODE}"
            if [[ "${CODE}" == "200" ]]; then
              echo "Healthy (HTTP 200)."
              exit 0
            fi
            sleep "${backoff}"
            backoff=$(( backoff * 2 ))
          done

          echo "Version URL did not return HTTP 200 in time"
          exit 1

      - name: Promote traffic to new version (only on tag)
        run: |
          gcloud app services set-traffic "${{ vars.GAE_SERVICE }}" \
            --project "${{ vars.GCP_PROJECT }}" \
            --splits "${VERSION}=1" \
            --quiet

      - name: Prune old App Engine versions (keep 2)
        shell: bash
        run: |
          set -euo pipefail
          # Потрібен jq; на ubuntu-latest він зазвичай є, але підстрахуємось
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

          echo "Fetching versions for service: ${{ vars.GAE_SERVICE }}"
          versions_json="$(gcloud app versions list \
            --project "${{ vars.GCP_PROJECT }}" \
            --service "${{ vars.GAE_SERVICE }}" \
            --format=json)"

          total="$(jq 'length' <<<"$versions_json")"
          echo "Total versions: $total"
          if [[ "$total" -le 2 ]]; then
            echo "Nothing to prune."
            exit 0
          fi

          # Відсортуємо від найстарішої до найновішої за часом деплою
          # і зберемо пари: id + traffic_split (0 якщо null)
          mapfile -t ordered <<<"$(jq -r '
            sort_by(.deployment.createTime)
            | .[]
            | "\(.id) \(.traffic_split // 0)"
          ' <<<"$versions_json")"

          to_delete=$(( total - 2 ))
          echo "Need to delete $to_delete old version(s) (keeping 2 newest)."

          for row in "${ordered[@]}"; do
            vid="$(awk '{print $1}' <<<"$row")"
            traffic="$(awk '{print $2}' <<<"$row")"
            # Пропускаємо, якщо вже достатньо видалили
            [[ "$to_delete" -le 0 ]] && break
            # Не видаляємо версії, що несуть трафік
            if [[ "$traffic" != "0" && "$traffic" != "0.0" ]]; then
              echo "Skip ${vid}: has traffic=${traffic}"
              continue
            fi
            # Не видаляємо 2 найновіші: вони наприкінці списку.
            # Ми йдемо з найстаріших до найновіших, тож видаляємо лише поки to_delete>0.
            echo "Deleting old version: ${vid}"
            gcloud app versions delete "${vid}" \
              --project "${{ vars.GCP_PROJECT }}" \
              --service "${{ vars.GAE_SERVICE }}" \
              --quiet
            to_delete=$(( to_delete - 1 ))
          done

          if [[ "$to_delete" -gt 0 ]]; then
            echo "WARNING: Still $to_delete extra version(s) present but carrying traffic; not deleted."
            echo "You can reduce traffic splits or promote, then re-run pruning."
          fi


      - name: List versions
        run: |
          gcloud app versions list \
            --project "${{ vars.GCP_PROJECT }}" \
            --service="${{ vars.GAE_SERVICE }}" \
            --format="table(version.id,servingStatus,traffic_split,deployment.createTime)"
